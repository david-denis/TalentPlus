using System;using System.Collections.ObjectModel;using System.Collections.Generic;using System.Linq;using Xamarin.Forms;namespace TalentPlus.Shared{	class ActivityItem {		public string activityName{ get; set;}	}	public class ThemeItem {		public int cellType{ get; set; }		public string activityId{ get; set; }		public bool isOpend{ get; set; }		public int childCount{ get; set; }		public string firstIconName{ get; set;}		public Color backgroundColor{ get; set; }		public string description{ get; set; }		public bool secondIconVisible{ get; set; }	}	class ActivityCell : ViewCell{		public ActivityCell()		{			var activityImage = new Image {				HorizontalOptions = LayoutOptions.Start,				VerticalOptions = LayoutOptions.Center,				Source = "activities.png",				Scale = 0.6			} ;			var activityName = new Label {				HorizontalOptions = LayoutOptions.FillAndExpand,				VerticalOptions = LayoutOptions.Center			} ;			activityName.SetBinding (Label.TextProperty, "activityName");			var viewLayout = new StackLayout () {				Orientation = StackOrientation.Horizontal,				VerticalOptions = LayoutOptions.Center,				Children = {activityImage, activityName},				BackgroundColor = Color.Gray,				HeightRequest = 50			} ;			View = viewLayout;		}	}	class ThemeCell : ViewCell{		public TPListView activityList;		public ThemeCell()		{			var viewLayout = new StackLayout () {				Orientation = StackOrientation.Vertical			} ;			var firstImage = new Image {				HorizontalOptions = LayoutOptions.Start,				VerticalOptions = LayoutOptions.Center,				Scale = 0.7			} ;			firstImage.SetBinding (Image.SourceProperty, "firstIconName");			var shortDescription = new Label {				HorizontalOptions = LayoutOptions.FillAndExpand,				FontSize = Device.GetNamedSize(NamedSize.Medium, typeof(Label)),				VerticalOptions = LayoutOptions.Center			} ;			shortDescription.SetBinding (Label.TextProperty, "description");			var secondImage = new Image {				HorizontalOptions = LayoutOptions.End,				VerticalOptions = LayoutOptions.Center,				Source = "pencil.png",				Scale = 0.7			} ;			secondImage.SetBinding (Image.IsVisibleProperty, "secondIconVisible");			var shortDescriptionCell = new StackLayout () {				Orientation = StackOrientation.Horizontal,				VerticalOptions = LayoutOptions.Center,				Children = {firstImage, shortDescription, secondImage},				Padding = new Thickness(5,0)			} ;			shortDescriptionCell.SetBinding (StackLayout.BackgroundColorProperty, "backgroundColor");			activityList = new TPListView () {			} ;			activityList.ItemsSource = new ActivityItem[] {				new ActivityItem{  activityName = "Activity1" },				new ActivityItem{  activityName = "Activity2" },				new ActivityItem{  activityName = "Activity3" }			} ;			activityList.ItemTemplate = new DataTemplate (typeof(ActivityCell));			activityList.SizeChanged += (object sender, EventArgs e) => {				viewLayout.HeightRequest = shortDescriptionCell.Height + activityList.Height;			} ;			viewLayout.Children.Add (shortDescriptionCell);			viewLayout.Children.Add (activityList);			View = shortDescriptionCell;		}	}	public class ExploreThemesView : BaseView	{		public ObservableCollection<ThemeItem> originalSourceItems = new ObservableCollection<ThemeItem> ();		public ObservableCollection<ThemeItem> listViewItems = new ObservableCollection<ThemeItem> ();		public ExploreThemesView (ActivitiesView parent, ActivitiesViewModel viewModel)		{			Title = "Explore Themes";			var themeList = new TPListView {				RowHeight = 50			} ;			ObservableCollection<Activity> activities = viewModel.Activities;			var dictionary = new Dictionary<string, List<Activity>>();			for (int i = 0; i < activities.Count; i++) {				string theme = activities [i].Theme.ShortDescription;				Activity activity = activities [i];				if (!dictionary.ContainsKey(theme)) {					dictionary.Add(theme, new List<Activity>());				}				dictionary [theme].Add (activity);			}			int type, count;			string desc, iconName;			bool visible;			Color color;			var arrayOfAllThemes = dictionary.Keys.ToArray ();			for (int i = 0; i < arrayOfAllThemes.Length; i++) {				type = 0;				color = Color.White;				iconName = "about.png";				visible = true;				desc = arrayOfAllThemes [i];				List<Activity> activitiesOfTheme = dictionary [desc];				count = activitiesOfTheme.Count;				originalSourceItems.Add (new ThemeItem{ cellType = type, isOpend = false, childCount = count, firstIconName = iconName, backgroundColor = color, description = desc, secondIconVisible = visible });				for (int j = 0; j < activitiesOfTheme.Count; j++) {					type = 1;					count = 0;					color = Color.FromRgb (236, 237, 242);					iconName = "activities.png";					visible = false;					desc = activitiesOfTheme [j].ShortDescription;					string id = activitiesOfTheme [j].Id;					originalSourceItems.Add (new ThemeItem{ cellType = type, activityId = id, isOpend = false, childCount = count, firstIconName = iconName, backgroundColor = color, description = desc, secondIconVisible = visible });				}			}			for (int i = 0; i < arrayOfAllThemes.Length + activities.Count; i++) {				if (originalSourceItems[i].cellType == 0)				{					listViewItems.Add(originalSourceItems[i]);				}			}			themeList.ItemsSource = listViewItems;			//			themeList.SeparatorVisibility = SeparatorVisibility.None;//			themeList.SeparatorColor = Color.FromRgb(223, 222, 228);			themeList.SeparatorColor = Color.FromRgb(203, 202, 208);			themeList.ItemTemplate = new DataTemplate (typeof(ThemeCell));			themeList.ItemTapped += async (sender, e) => {				ThemeItem item = (ThemeItem)e.Item;				if (item.cellType == 0) {					int selectedCellIndex = listViewItems.IndexOf(item);					int originalCellIndex = originalSourceItems.IndexOf(item);					if (item.isOpend) {						List<Activity> activitiesOfSelectedTheme = dictionary [item.description];						for (int i = 0; i < activitiesOfSelectedTheme.Count; i++) {							listViewItems.RemoveAt(selectedCellIndex + 1);						}						listViewItems[selectedCellIndex].isOpend = false;					}					else {						for (int i = 1; i <= item.childCount; i++) {							listViewItems.Insert(selectedCellIndex + i, originalSourceItems[originalCellIndex + i]);						}						listViewItems[selectedCellIndex].isOpend = true;					}					themeList.ItemsSource = listViewItems;				}				else				{					parent.MoveToPage(item.activityId);#if __ANDROID__					await Navigation.PopAsync();#else					var homeView = this.Parent as TabbedIconPage;					homeView.SwitchToActivities();#endif				}			} ;			Content = new StackLayout {				VerticalOptions = LayoutOptions.FillAndExpand,				Children = { themeList }			} ;		}	}}